--- a/src/components/RobustGantt.jsx
+++ b/src/components/RobustGantt.jsx
@@ -122,7 +122,7 @@
       renderHourTimeline(root, scale.pxPerUnit, scale.totalUnits, scale.contentPx, fine);
     } else if (view === 'month') {
       const days = daysInMonth(anchorDate);
-      renderMonthTimeline(root, scale.pxPerUnit, days, scale.contentPx);
+      renderMonthTimeline(root, scale.pxPerUnit, days, scale.contentPx, anchorDate);
     } else {
       renderWeekTimeline(root, preset);
     }
@@ -176,6 +176,9 @@
     }
     return byId;
   }, [resources, tasks, view, preset, anchorDate, maxLanes, laneOffset, BASE_ROW_PX, scale]);
+// Pre-compute weekend bands once per render (used by timeline rows overlay)
+const weekendBands = useMemo(() => computeWeekendBands(view, preset, anchorDate, scale), [view, preset, anchorDate, scale]);
+
 
   // ----------------- Global hitâ€‘testing so lower bars are selectable -----------------
   // We build a geometry map of rendered bars (client rects) and select the nearest vertically.
@@ -360,6 +363,14 @@
               const rowH = info.rowHeight;
               return (
                 <div key={r.id} className="relative border-b border-gray-800"
+{/* weekend bands overlay */}
+{weekendBands.map((b,i)=> (
+  <div key={'wb-'+i}
+       className="absolute"
+       style={{ left: b.left, width: b.width, top: 0, bottom: 0, background: WEEKEND_RGBA, pointerEvents: 'none' }}
+  />
+))}
+
                      style={{ height: `${rowH}px`, background: rowIdx%2===0? 'var(--gantt-bg-odd)' : 'var(--gantt-bg-even)'}}>
                   {info.items?.map(({ task, seg, lane }) => {
                     const { leftPx, widthPx, label } = segToPixels(seg, scale);
@@ -463,7 +474,18 @@
   }
 }
 
-function renderMonthTimeline(root, pxPerDay, totalDays, contentWidth){
+function renderMonthTimeline(root, pxPerDay, totalDays, contentWidth, anchorDate){
+  /* weekend bands */
+  for (let d=1; d<=totalDays; d++){
+    const dt = new Date(anchorDate.getFullYear(), anchorDate.getMonth(), d);
+    const wd = dt.getDay();
+    if (wd === 0 || wd === 6){
+      const left = Math.round((d-1)*pxPerDay);
+      const band = document.createElement('div');
+      band.style.cssText = `position:absolute;left:${left}px;top:0;bottom:0;width:${Math.round(pxPerDay)}px;background:rgba(56,250,191,0.25);pointer-events:none;`;
+      root.appendChild(band);
+    }
+  }
   for (let d=0; d<=totalDays; d++){
     const x = Math.round(d*pxPerDay);
     const line = document.createElement('div');
@@ -480,8 +502,23 @@
 }
 
 function renderWeekTimeline(root, preset){
+  /* weekend bands (Full Week) */
+  const isWork = /Work/i.test(preset);
+  const days = isWork ? 5 : 7;
+  const w = root.clientWidth || 800;
+  const cell = w / days;
+  if (!isWork){
+    // Sunday index 0, Saturday index 6
+    [0,6].forEach(idx => {
+      const left = Math.round(idx*cell);
+      const band = document.createElement('div');
+      band.style.cssText = `position:absolute;left:${left}px;top:0;bottom:0;width:${Math.round(cell)}px;background:rgba(56,250,191,0.25);pointer-events:none;`;
+      root.appendChild(band);
+    });
+  }
+
   root.innerHTML = '';
-  const days = /Work/i.test(preset) ? 5 : 7;
+  const days = isWork ? 5 : 7;
   const w = root.clientWidth || 800;
   const cell = w / days;
   for (let i=0;i<=days;i++){
@@ -535,6 +572,31 @@
     return { startUnit, endUnit, label: task.title };
   }
   return null;
+}
+
+
+// Compute weekend bands (left/width in pixels) for current view
+function computeWeekendBands(view, preset, anchorDate, scale){
+  const bands = [];
+  if (!scale) return bands;
+  const px = scale.pxPerUnit;
+
+  if (view === 'month'){
+    const dim = daysInMonth(anchorDate);
+    for (let d=1; d<=dim; d++){
+      const dt = new Date(anchorDate.getFullYear(), anchorDate.getMonth(), d);
+      const wd = dt.getDay(); // 0 Sun .. 6 Sat
+      if (wd === 0 || wd === 6){
+        const left = Math.round((d-1) * px);
+        bands.push({ left, width: Math.round(px) });
+      }
+    }
+  } else if (view === 'week' && !/Work/i.test(preset||'')){
+    // Full Week: shade Sunday (0) and Saturday (6)
+    bands.push({ left: Math.round(0 * px), width: Math.round(px) });
+    bands.push({ left: Math.round(6 * px), width: Math.round(px) });
+  }
+  return bands;
 }
 
 function segToPixels(seg, scale){
@@ -571,6 +633,8 @@
 }
 
 // --------- API / Data utilities ----------
+const WEEKEND_RGBA = 'rgba(56, 250, 191, 0.25)';
+
 const DEFAULT_PALETTE = [
   '#3B82F6','#10B981','#F59E0B','#EF4444','#8B5CF6','#06B6D4','#84CC16','#F97316','#E11D48','#14B8A6'
 ];
